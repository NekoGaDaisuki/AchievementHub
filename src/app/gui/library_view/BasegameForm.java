/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app.gui.library_view;

/**
 *
 * @author Lexi
 */
class BasegameForm extends javax.swing.JPanel
{

    /**
     * Creates new form BasegameForm
     */
    private BasegameForm()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        alliancesStylesPane = new javax.swing.JScrollPane();
        alliancesStylesTable = new javax.swing.JTable();
        raresStylesPane = new javax.swing.JScrollPane();
        raresStylesTable = new javax.swing.JTable();
        dwarwenStylePane = new javax.swing.JScrollPane();
        dwarwenStyleTable = new javax.swing.JTable();
        glassStylePane = new javax.swing.JScrollPane();
        glassStyleTable = new javax.swing.JTable();
        absouteStylePane = new javax.swing.JScrollPane();
        absouteStyleTable = new javax.swing.JTable();
        mercenaryStylePane = new javax.swing.JScrollPane();
        mercenaryStyleTable = new javax.swing.JTable();

        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        alliancesStylesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {"Motifs Artisanaux 1 : Les Altmers", null, "Motifs Artisanaux 4 : Les Nordiques", null, "Motifs Artisanaux 7 : Les Khajiits", null},
                {"Motifs Artisanaux 2 : Les Elfes Noirs", null, "Motifs Artisanaux 5 : Les Brétons", null, "Motifs Artisanaux 8 : Les Orques", null},
                {"Motifs Artisanaux 3 : Les Elfes des Bois", null, "Motifs Artisanaux 6 : Les Rougegardes", null, "Motifs Artisanaux 9 : Les Argoniens", null}
            },
            new String []
            {
                "", "", "", "", "", ""
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean []
            {
                false, true, false, true, false, true
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        alliancesStylesTable.getTableHeader().setReorderingAllowed(false);
        alliancesStylesPane.setViewportView(alliancesStylesTable);
        if (alliancesStylesTable.getColumnModel().getColumnCount() > 0)
        {
            alliancesStylesTable.getColumnModel().getColumn(0).setResizable(false);
            alliancesStylesTable.getColumnModel().getColumn(0).setPreferredWidth(200);
            alliancesStylesTable.getColumnModel().getColumn(1).setResizable(false);
            alliancesStylesTable.getColumnModel().getColumn(1).setPreferredWidth(60);
            alliancesStylesTable.getColumnModel().getColumn(2).setResizable(false);
            alliancesStylesTable.getColumnModel().getColumn(2).setPreferredWidth(200);
            alliancesStylesTable.getColumnModel().getColumn(3).setResizable(false);
            alliancesStylesTable.getColumnModel().getColumn(3).setPreferredWidth(60);
            alliancesStylesTable.getColumnModel().getColumn(4).setResizable(false);
            alliancesStylesTable.getColumnModel().getColumn(4).setPreferredWidth(200);
            alliancesStylesTable.getColumnModel().getColumn(5).setResizable(false);
            alliancesStylesTable.getColumnModel().getColumn(5).setPreferredWidth(60);
        }

        raresStylesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {"Motifs Artisanaux 10 : Les Impériaux", null},
                {"Motifs Artisanaux 11 : Les Elfes Antiques", null},
                {"Motifs Artisanaux 12 : Les Barbares", null},
                {"Motifs Artisanaux 13 : Les Primitifs", null},
                {"Motifs Artisanaux 14 : Les Daedra", null}
            },
            new String []
            {
                "", ""
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean []
            {
                false, true
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        raresStylesTable.getTableHeader().setReorderingAllowed(false);
        raresStylesPane.setViewportView(raresStylesTable);
        if (raresStylesTable.getColumnModel().getColumnCount() > 0)
        {
            raresStylesTable.getColumnModel().getColumn(0).setResizable(false);
            raresStylesTable.getColumnModel().getColumn(0).setPreferredWidth(350);
            raresStylesTable.getColumnModel().getColumn(1).setResizable(false);
            raresStylesTable.getColumnModel().getColumn(1).setPreferredWidth(60);
        }

        dwarwenStyleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {"Motifs Artisanaux 15, Ch. 1 : Les Haches Dwemers", null},
                {"Motifs Artisanaux 15, Ch. 2 : Les Ceintures Dwemers", null},
                {"Motifs Artisanaux 15, Ch. 3 : Les Bottes Dwemers", null},
                {"Motifs Artisanaux 15, Ch. 4 : Les Arcs Dwemers", null},
                {"Motifs Artisanaux 15, Ch. 5 : Les Plastrons Dwemers", null},
                {"Motifs Artisanaux 15, Ch. 6 : Les Dagues Dwemers", null},
                {"Motifs Artisanaux 15, Ch. 7 : Les Gants Dwemers", null},
                {"Motifs Artisanaux 15, Ch. 8 : Les Casques Dwemers", null},
                {"Motifs Artisanaux 15, Ch. 9 : Les Jambières Dwemers", null},
                {"Motifs Artisanaux 15, Ch. 10 : Les Masses Dwemers", null},
                {"Motifs Artisanaux 15, Ch. 11 : Les Boucliers Dwemers", null},
                {"Motifs Artisanaux 15, Ch. 12 : Les Épaulières Dwemers", null},
                {"Motifs Artisanaux 15, Ch. 13 : Les Bâtons Dwemers", null},
                {"Motifs Artisanaux 15, Ch. 14 : Les Épées Dwemers", null}
            },
            new String []
            {
                "", ""
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean []
            {
                false, true
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        dwarwenStyleTable.getTableHeader().setReorderingAllowed(false);
        dwarwenStylePane.setViewportView(dwarwenStyleTable);
        if (dwarwenStyleTable.getColumnModel().getColumnCount() > 0)
        {
            dwarwenStyleTable.getColumnModel().getColumn(0).setResizable(false);
            dwarwenStyleTable.getColumnModel().getColumn(0).setPreferredWidth(350);
            dwarwenStyleTable.getColumnModel().getColumn(1).setResizable(false);
            dwarwenStyleTable.getColumnModel().getColumn(1).setPreferredWidth(60);
        }

        glassStyleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {"Motifs Artisanaux 16, Ch. 1 : Les Haches de Verre", null},
                {"Motifs Artisanaux 16, Ch. 2 : Les Ceintures de Verre", null},
                {"Motifs Artisanaux 16, Ch. 3 : Les Bottes de Verre", null},
                {"Motifs Artisanaux 16, Ch. 4 : Les Arcs de Verre", null},
                {"Motifs Artisanaux 16, Ch. 5 : Les Plastrons de Verre", null},
                {"Motifs Artisanaux 16, Ch. 6 : Les Dagues de Verre", null},
                {"Motifs Artisanaux 16, Ch. 7 : Les Gants de Verre", null},
                {"Motifs Artisanaux 16, Ch. 8 : Les Casques de Verre", null},
                {"Motifs Artisanaux 16, Ch. 9 : Les Jambières de Verre", null},
                {"Motifs Artisanaux 16, Ch. 10 : Les Masses de Verre", null},
                {"Motifs Artisanaux 16, Ch. 11 : Les Boucliers de Verre", null},
                {"Motifs Artisanaux 16, Ch. 12 : Les Épaulières de Verre", null},
                {"Motifs Artisanaux 16, Ch. 13 : Les Bâtons de Verre", null},
                {"Motifs Artisanaux 16, Ch. 14 : Les Épées de Verre", null}
            },
            new String []
            {
                "", ""
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean []
            {
                false, true
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        glassStyleTable.getTableHeader().setReorderingAllowed(false);
        glassStylePane.setViewportView(glassStyleTable);
        if (glassStyleTable.getColumnModel().getColumnCount() > 0)
        {
            glassStyleTable.getColumnModel().getColumn(0).setResizable(false);
            glassStyleTable.getColumnModel().getColumn(0).setPreferredWidth(350);
            glassStyleTable.getColumnModel().getColumn(1).setResizable(false);
            glassStyleTable.getColumnModel().getColumn(1).setPreferredWidth(60);
        }

        absouteStyleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {"Motifs Artisanaux 29 : Les Absous", null}
            },
            new String []
            {
                "", ""
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean []
            {
                false, true
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        absouteStyleTable.getTableHeader().setReorderingAllowed(false);
        absouteStylePane.setViewportView(absouteStyleTable);
        if (absouteStyleTable.getColumnModel().getColumnCount() > 0)
        {
            absouteStyleTable.getColumnModel().getColumn(0).setResizable(false);
            absouteStyleTable.getColumnModel().getColumn(0).setPreferredWidth(350);
            absouteStyleTable.getColumnModel().getColumn(1).setResizable(false);
            absouteStyleTable.getColumnModel().getColumn(1).setPreferredWidth(60);
        }

        mercenaryStyleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {"Motifs Artisanaux 19, Ch. 1 : Les Haches de Mercenaire", null},
                {"Motifs Artisanaux 19, Ch. 2 : Les Ceintures de Mercenaire", null},
                {"Motifs Artisanaux 19, Ch. 3 : Les Bottes de Mercenaire", null},
                {"Motifs Artisanaux 19, Ch. 4 : Les Arcs de Mercenaire", null},
                {"Motifs Artisanaux 19, Ch. 5 : Les Plastrons de Mercenaire", null},
                {"Motifs Artisanaux 19, Ch. 6 : Les Dagues de Mercenaire", null},
                {"Motifs Artisanaux 19, Ch. 7 : Les Gants de Mercenaire", null},
                {"Motifs Artisanaux 19, Ch. 8 : Les Casques de Mercenaire", null},
                {"Motifs Artisanaux 19, Ch. 9 : Les Jambières de Mercenaire", null},
                {"Motifs Artisanaux 19, Ch. 10 : Les Masses de Mercenaire", null},
                {"Motifs Artisanaux 19, Ch. 11 : Les Boucliers de Mercenaire", null},
                {"Motifs Artisanaux 19, Ch. 12 : Les Épaulières de Mercenaire", null},
                {"Motifs Artisanaux 19, Ch. 13 : Les Bâtons de Mercenaire", null},
                {"Motifs Artisanaux 19, Ch. 14 : Les Épées de Mercenaire", null}
            },
            new String []
            {
                "", ""
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean []
            {
                false, true
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        mercenaryStyleTable.getTableHeader().setReorderingAllowed(false);
        mercenaryStylePane.setViewportView(mercenaryStyleTable);
        if (mercenaryStyleTable.getColumnModel().getColumnCount() > 0)
        {
            mercenaryStyleTable.getColumnModel().getColumn(0).setResizable(false);
            mercenaryStyleTable.getColumnModel().getColumn(0).setPreferredWidth(350);
            mercenaryStyleTable.getColumnModel().getColumn(1).setResizable(false);
            mercenaryStyleTable.getColumnModel().getColumn(1).setPreferredWidth(60);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(raresStylesPane, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alliancesStylesPane, javax.swing.GroupLayout.PREFERRED_SIZE, 955, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(dwarwenStylePane, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mercenaryStylePane, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(absouteStylePane, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(glassStylePane, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(57, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(alliancesStylesPane, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(raresStylesPane, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(dwarwenStylePane, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(glassStylePane, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(absouteStylePane, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mercenaryStylePane, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(63, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    static BasegameForm getInstance()
    {
        BasegameForm instance = BasegameForm.INSTANCE;
        if (instance == null)
        {
            synchronized (BasegameForm.class)
            {
                instance = BasegameForm.INSTANCE;
                if (instance == null)
                {
                    BasegameForm.INSTANCE = instance = new BasegameForm();
                }
            }
        }
        return instance;
    }

    static void importTables(LibraryViewData.basegameTableModel basegameTableModel)
    {
        java.util.Vector absouteData = basegameTableModel.getAbsouteTable();
        for (int i = 0; i < absouteData.size(); ++i)
        {
            for (int j = 1; j < ((java.util.Vector) absouteData.elementAt(i)).size(); ++j)
            {
                getInstance().absouteStyleTable.setValueAt(((java.util.Vector) absouteData.elementAt(i)).elementAt(j), i, j);
            }
        }
        java.util.Vector alliancesData = basegameTableModel.getAlliancesTable();
        for (int i = 0; i < alliancesData.size(); ++i)
        {
            for (int j = 1; j < ((java.util.Vector) alliancesData.elementAt(i)).size(); ++j)
            {
                getInstance().alliancesStylesTable.setValueAt(((java.util.Vector) alliancesData.elementAt(i)).elementAt(j), i, j);
            }
        }
        java.util.Vector dwarwenData = basegameTableModel.getDwarwenTable();
        for (int i = 0; i < dwarwenData.size(); ++i)
        {
            for (int j = 1; j < ((java.util.Vector) dwarwenData.elementAt(i)).size(); ++j)
            {
                getInstance().dwarwenStyleTable.setValueAt(((java.util.Vector) dwarwenData.elementAt(i)).elementAt(j), i, j);
            }
        }
        java.util.Vector glassData = basegameTableModel.getGlassTable();
        for (int i = 0; i < glassData.size(); ++i)
        {
            for (int j = 1; j < ((java.util.Vector) glassData.elementAt(i)).size(); ++j)
            {
                getInstance().glassStyleTable.setValueAt(((java.util.Vector) glassData.elementAt(i)).elementAt(j), i, j);
            }
        }
        java.util.Vector mercenaryData = basegameTableModel.getMercenaryTable();
        for (int i = 0; i < mercenaryData.size(); ++i)
        {
            for (int j = 1; j < ((java.util.Vector) mercenaryData.elementAt(i)).size(); ++j)
            {
                getInstance().mercenaryStyleTable.setValueAt(((java.util.Vector) mercenaryData.elementAt(i)).elementAt(j), i, j);
            }
        }
        java.util.Vector raresStylesData = basegameTableModel.getRaresStylesTable();
        for (int i = 0; i < raresStylesData.size(); ++i)
        {
            for (int j = 1; j < ((java.util.Vector) raresStylesData.elementAt(i)).size(); ++j)
            {
                getInstance().raresStylesTable.setValueAt(((java.util.Vector) raresStylesData.elementAt(i)).elementAt(j), i, j);
            }
        }
    }

    static LibraryViewData.basegameTableModel retrieveTables()
    {
        LibraryViewData.basegameTableModel tables = new LibraryViewData.basegameTableModel();
        tables.setAbsouteTable(getInstance().absouteStyleTable.getModel());
        tables.setAlliancesTable(getInstance().alliancesStylesTable.getModel());
        tables.setDwarwenTable(getInstance().dwarwenStyleTable.getModel());
        tables.setGlassTable(getInstance().glassStyleTable.getModel());
        tables.setMercenaryTable(getInstance().mercenaryStyleTable.getModel());
        tables.setRaresStylesTable(getInstance().raresStylesTable.getModel());
        return tables;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane absouteStylePane;
    private javax.swing.JTable absouteStyleTable;
    private javax.swing.JScrollPane alliancesStylesPane;
    private javax.swing.JTable alliancesStylesTable;
    private javax.swing.JScrollPane dwarwenStylePane;
    private javax.swing.JTable dwarwenStyleTable;
    private javax.swing.JScrollPane glassStylePane;
    private javax.swing.JTable glassStyleTable;
    private javax.swing.JScrollPane mercenaryStylePane;
    private javax.swing.JTable mercenaryStyleTable;
    private javax.swing.JScrollPane raresStylesPane;
    private javax.swing.JTable raresStylesTable;
    // End of variables declaration//GEN-END:variables

    private static volatile BasegameForm INSTANCE;
}
